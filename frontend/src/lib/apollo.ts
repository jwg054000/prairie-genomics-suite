import { ApolloClient, InMemoryCache, createHttpLink, from } from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nimport { onError } from '@apollo/client/link/error';\nimport { WebSocketLink } from '@apollo/client/link/ws';\nimport { getMainDefinition } from '@apollo/client/utilities';\nimport { split } from '@apollo/client/core';\n\n// HTTP Link for queries and mutations\nconst httpLink = createHttpLink({\n  uri: process.env.REACT_APP_API_URL || 'http://localhost:4000/graphql',\n});\n\n// WebSocket Link for subscriptions\nconst wsLink = new WebSocketLink({\n  uri: process.env.REACT_APP_WS_URL || 'ws://localhost:4000/graphql',\n  options: {\n    reconnect: true,\n    connectionParams: () => {\n      const token = localStorage.getItem(process.env.REACT_APP_JWT_STORAGE_KEY || 'prairie_genomics_token');\n      return token ? {\n        authorization: `Bearer ${token}`,\n      } : {};\n    },\n  },\n});\n\n// Auth link to add JWT token to requests\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem(process.env.REACT_APP_JWT_STORAGE_KEY || 'prairie_genomics_token');\n  \n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\n// Error link to handle GraphQL errors\nconst errorLink = onError(({ graphQLErrors, networkError, operation, forward }) => {\n  if (graphQLErrors) {\n    graphQLErrors.forEach(({ message, locations, path }) => {\n      console.error(\n        `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`\n      );\n      \n      // Handle authentication errors\n      if (message.includes('Authentication') || message.includes('Unauthorized')) {\n        localStorage.removeItem(process.env.REACT_APP_JWT_STORAGE_KEY || 'prairie_genomics_token');\n        window.location.href = '/login';\n      }\n    });\n  }\n\n  if (networkError) {\n    console.error(`[Network error]: ${networkError}`);\n    \n    // Handle network errors\n    if (networkError.statusCode === 401) {\n      localStorage.removeItem(process.env.REACT_APP_JWT_STORAGE_KEY || 'prairie_genomics_token');\n      window.location.href = '/login';\n    }\n  }\n});\n\n// Split link to use WebSocket for subscriptions, HTTP for queries/mutations\nconst splitLink = split(\n  ({ query }) => {\n    const definition = getMainDefinition(query);\n    return (\n      definition.kind === 'OperationDefinition' &&\n      definition.operation === 'subscription'\n    );\n  },\n  wsLink,\n  from([errorLink, authLink, httpLink])\n);\n\n// Apollo Client configuration\nexport const client = new ApolloClient({\n  link: splitLink,\n  cache: new InMemoryCache({\n    typePolicies: {\n      Project: {\n        fields: {\n          datasets: {\n            merge(existing = [], incoming) {\n              return incoming;\n            },\n          },\n          analyses: {\n            merge(existing = [], incoming) {\n              return incoming;\n            },\n          },\n        },\n      },\n      Dataset: {\n        fields: {\n          files: {\n            merge(existing = [], incoming) {\n              return incoming;\n            },\n          },\n        },\n      },\n      Analysis: {\n        fields: {\n          logs: {\n            merge(existing = [], incoming) {\n              return incoming;\n            },\n          },\n        },\n      },\n      Query: {\n        fields: {\n          projects: {\n            merge(existing = [], incoming) {\n              return incoming;\n            },\n          },\n          datasets: {\n            merge(existing = [], incoming) {\n              return incoming;\n            },\n          },\n          analyses: {\n            merge(existing = [], incoming) {\n              return incoming;\n            },\n          },\n          pipelines: {\n            merge(existing = [], incoming) {\n              return incoming;\n            },\n          },\n        },\n      },\n    },\n  }),\n  defaultOptions: {\n    watchQuery: {\n      errorPolicy: 'all',\n    },\n    query: {\n      errorPolicy: 'all',\n    },\n  },\n  connectToDevTools: process.env.NODE_ENV === 'development',\n});\n\n// Helper function to refresh the auth token\nexport const refreshAuthToken = () => {\n  const token = localStorage.getItem(process.env.REACT_APP_JWT_STORAGE_KEY || 'prairie_genomics_token');\n  if (token) {\n    // Reset the Apollo Client to use the new token\n    client.resetStore();\n  }\n};\n\n// Helper function to handle logout\nexport const logout = () => {\n  localStorage.removeItem(process.env.REACT_APP_JWT_STORAGE_KEY || 'prairie_genomics_token');\n  client.clearStore();\n  window.location.href = '/login';\n};